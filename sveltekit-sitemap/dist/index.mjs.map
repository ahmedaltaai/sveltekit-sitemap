{"version":3,"sources":["../src/utils.ts","../src/hook.ts","../src/plugin.ts"],"sourcesContent":["import { RO_Sitemap, RouteDefinitions, RouteDefinition, Sitemap, UserAgent } from \"./types\";\nimport fs from \"fs\";\n\nexport const encodeXML = (str: string) => {\n  return str\n    .replace(/&/g, \"&amp;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\")\n    .replace(/\"/g, \"&quot;\")\n    .replace(/'/g, \"&apos;\");\n};\n\nexport const generateSitemap = <S extends RO_Sitemap>(\n  definitions: RouteDefinitions<S>,\n  baseUrl: string,\n  sitemap: S\n) => {\n  // Instantiate a routes object with all the static routes\n  // The will be override if you pass custom settings\n  const routes: Record<string, RouteDefinition<string>> = Object.keys(sitemap).reduce((acc, route) => {\n    const isDynamic = route.includes(\"[\");\n    if (!isDynamic) {\n      Object.assign(acc, { [route]: { path: route } });\n    }\n    return acc;\n  }, {});\n\n  // Add custom route data to the routes object\n  Object.entries(sitemap).forEach(([route]) => {\n    const RouteDefinition = definitions[route as keyof typeof definitions];\n    if (RouteDefinition) {\n      if (Array.isArray(RouteDefinition)) {\n        RouteDefinition.forEach((route) => {\n          Object.assign(routes, { [route.path]: route });\n        });\n      } else {\n        Object.assign(routes, { [RouteDefinition.path]: RouteDefinition });\n      }\n    }\n  });\n\n  // Build and return sitemap\n  // refs : https://github.com/sveltejs/kit/issues/1142#issuecomment-1032407693 https://github.com/Shopify/hydrogen/blob/1de3864214d04d9214e323d7f0a953c7b9309b7b/templates/demo-store/src/routes/sitemap.xml.server.ts\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset\nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\nxsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\"\nxmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\"\nxmlns:image=\"http://www.google.com/schemas/sitemap-image/1.1\"\nxmlns:video=\"http://www.google.com/schemas/sitemap-video/1.1\"\nxmlns:news=\"http://www.google.com/schemas/sitemap-news/0.9\"\nxmlns:mobile=\"http://www.google.com/schemas/sitemap-mobile/1.0\"\nxmlns:pagemap=\"http://www.google.com/schemas/sitemap-pagemap/1.0\"\nxmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\n${Object.values(routes)\n  .map(({ path, priority, changeFreq, image, lastMod }) => {\n    return `  <url>\n    <loc>${baseUrl}${path}</loc>\n  </url>\n  ${lastMod ? `<lastmod>${lastMod}</lastmod>` : \"\"}\n  ${priority ? `<priority>${priority}</priority>` : \"\"}\n  ${changeFreq ? `<changefreq>${changeFreq}</changefreq>` : \"\"}\n  ${\n    image\n      ? `\n    <image:image>\n      <image:loc>${encodeXML(image.url)}</image:loc>\n      <image:title>${encodeXML(image.title ?? \" \")}</image:title>\n      <image:caption>${encodeXML(image.altText ?? \" \")}</image:caption>\n    </image:image>`\n      : \"\"\n  }`;\n  })\n  .join(\"\\n\")}\n</urlset>`;\n};\n\nexport const generateRobots = <S extends RO_Sitemap>(\n  robots: boolean | UserAgent<S> | UserAgent<S>[],\n  baseUrl: string\n) => {\n  // Instantiate the agents to render array\n  const agentsToRender: { agent: string; crawlDelay?: number; allow: string[]; disallow: string[] }[] = [];\n\n  const parseAgent = (agent: UserAgent<S>) => {\n    const infos = Object.entries(agent.paths).reduce<{ allow: string[]; disallow: string[] }>(\n      (acc, [route, allow]) => {\n        if (allow) {\n          acc.allow.push(route);\n        } else {\n          acc.disallow.push(route);\n        }\n        return acc;\n      },\n      { allow: [], disallow: [] }\n    );\n\n    // Use the same config for all the user agents\n    if (Array.isArray(agent.userAgent)) {\n      agent.userAgent.forEach((a) => {\n        agentsToRender.push({\n          agent: a,\n          crawlDelay: agent.crawlDelay,\n          ...infos\n        });\n      });\n    } else {\n      agentsToRender.push({\n        agent: agent.userAgent || \"*\",\n        crawlDelay: agent.crawlDelay,\n        ...infos\n      });\n    }\n  };\n\n  // Build a default robot.txt for all user-agents\n  if (typeof robots === \"boolean\") {\n    agentsToRender.push({\n      agent: \"*\",\n      allow: robots === true ? [\"/\"] : [],\n      disallow: robots === false ? [\"/\"] : []\n    });\n  } else if (!Array.isArray(robots)) {\n    parseAgent(robots);\n  } else {\n    robots.forEach(parseAgent);\n  }\n\n  return `${agentsToRender\n    .map(({ agent, crawlDelay, allow, disallow }) =>\n      `User-agent: ${agent}\nSitemap: ${baseUrl}/sitemap.xml\n${crawlDelay ? `Crawl-delay: ${crawlDelay}` : \"\"}\n${allow.map((route) => `Allow: ${route}`).join(\"\\n\")}\n${disallow.map((route) => `Disallow: ${route}`).join(\"\\n\")}\n`\n        // Make it pretty\n        .replace(/\\n\\n/g, \"\\n\")\n        .replace(/\\n\\n/g, \"\\n\")\n    )\n    .join(\"\\n\")}\n`.trim();\n};\n\nexport const getRoutes = (dir: string): Sitemap => {\n  let routes: Sitemap = {};\n  const traverseRoutes = (path: string) => {\n    const id = path.replace(dir, \"\").replace(\"/+page.svelte\", \"\");\n\n    if (fs.statSync(path).isDirectory()) {\n      fs.readdirSync(path).forEach((file) => traverseRoutes(path + \"/\" + file));\n    }\n\n    const dirBase = path.replace(\"/+page.svelte\", \"\");\n\n    const isFolder =\n      fs.statSync(dirBase).isDirectory() &&\n      fs.readdirSync(path.replace(\"/+page.svelte\", \"\")).some((p) => {\n        return fs.statSync(dirBase + \"/\" + p).isDirectory();\n      });\n    Object.assign(routes, { [id || \"/\"]: isFolder });\n  };\n  fs.readdirSync(dir).forEach((file) => traverseRoutes(dir + \"/\" + file));\n\n  return routes;\n};\n","import type { Handle } from \"@sveltejs/kit\";\nimport type { SitemapParams, RO_Sitemap } from \"./types\";\nimport { generateRobots, generateSitemap } from \"./utils\";\n\nexport const sitemapHook =\n  <S extends RO_Sitemap>(sitemap: S, params: SitemapParams<S>): Handle =>\n  async ({ event, resolve }) => {\n    if (event.url.pathname === \"/sitemap.xml\") {\n      // Get dynamic custom definition for app routes\n      const routeDefinitions = await params.getRoutes(event);\n      return new Response(generateSitemap(routeDefinitions, event.url.origin, sitemap), {\n        status: 200,\n        headers: {\n          \"Content-Type\": \"application/xml\"\n        }\n      });\n    }\n\n    if (event.url.pathname === \"/robot.txt\") {\n      // Get dynamic robots directives\n      const robots = await params.getRobots(event);\n\n      // Build and return the robots.txt\n      return new Response(generateRobots<S>(robots, event.url.origin), {\n        headers: {\n          \"content-type\": \"text/plain\",\n          // Cache it for 24 hours\n          \"cache-control\": `max-age=${60 * 60 * 24}`\n        }\n      });\n    }\n\n    return resolve(event);\n  };\n","import fs from \"fs\";\nimport type { ViteDevServer } from \"vite\";\nimport { SitemapPluginParams } from \"./types\";\nimport { getRoutes } from \"./utils\";\n\nexport const sitemapPlugin = ({\n  routesDir = \"./src/routes\",\n  sitemapFile = \"./src/sitemap.ts\"\n}: SitemapPluginParams = {}) => {\n  function updateSitemap() {\n    fs.writeFileSync(\n      sitemapFile,\n      `import type { RO_Sitemap } from 'sveltekit-sitemap';\n\nexport const sitemap = (<const>${JSON.stringify(getRoutes(routesDir), null, 3).replace(\n        /\\uFFFF/g,\n        '\\\\\"'\n      )}) satisfies RO_Sitemap\n\nexport type Sitemap = typeof sitemap\n`\n    );\n  }\n  updateSitemap();\n\n  return {\n    name: \"sveltekit-sitemap\",\n    configureServer(server: ViteDevServer) {\n      server.watcher\n        .add([routesDir])\n        .on(\"add\", updateSitemap)\n        .on(\"unlink\", updateSitemap)\n        .on(\"unlinkDir\", updateSitemap);\n    }\n  };\n};\n"],"mappings":"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","names":["fs","encodeXML","str","generateSitemap","definitions","baseUrl","sitemap","routes","acc","route","RouteDefinition","path","priority","changeFreq","image","lastMod","_a","_b","generateRobots","robots","agentsToRender","parseAgent","agent","infos","allow","a","__spreadValues","crawlDelay","disallow","getRoutes","dir","traverseRoutes","id","fs","file","dirBase","isFolder","p","sitemapHook","sitemap","params","_0","__async","event","resolve","routeDefinitions","generateSitemap","robots","generateRobots","fs","sitemapPlugin","routesDir","sitemapFile","updateSitemap","fs","getRoutes","server"]}